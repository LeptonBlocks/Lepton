{
    "device": false,
    "identify": "lepton_max7219",
    "version": "0.0.0",
    "name": "Lepton MAX7219",
    "description": "Controls one or multiple LED matrix displays.",
    "homepage": "",
    "cover": {
        "name": "extension.svg",
        "url": "https://storage-eu.mblock.cc/ext-eu/extlist/prod/custom/5e983498_extension.svg"
    },
    "platform": [
        "mblockpc",
        "mblockweb"
    ],
    "targets": [
        "arduino_uno"
    ],
    "sort": 999,
    "codeTypes": [
        "arduinoc"
    ],
    "generator": {
        "arduinoc": {
            "template": "// generated by mBlock5 for <your product>\n// codes make you happy\n\n//( include //)\n#include <Arduino.h>\n//( lib //)\n\n//({\n    this.$ALL_VARIABLES.length==0?'':this.$ALL_VARIABLES.map(v=>\"float \"+v+\" = 0;\").join('\\\\n')\n}//)\n\n//( declare //)\n\n\nvoid _delay(float seconds) {\n  long endTime = millis() + seconds * 1000;\n  while(millis() < endTime) _loop();\n}\n\n//(\nvoid setup() {\n  //( setup //)\n  //( code //)\n}\n//)\n\nvoid _loop() {\n  //( _loop //)\n}\n\nvoid loop() {\n  _loop();\n}",
            "generator": "({\n  lang: 'arduinoc',\n  template: `<%=template%>`,\n  splitor: {\n    frame: {\n      left: \"//(\",\n      right: \"//)\",\n    },\n    expression: {\n      left: \"/*{\",\n      right: \"}*/\",\n    }\n  },\n  reducers: [\n    {\n      name: 'include',\n      reduce: (codes) => {\n        let codes1 = []\n        for (let code of codes) {\n          let codeStr = '';\n          if (typeof code === 'string') {\n            codeStr = code;\n          } else if (typeof code === 'function') {\n            codeStr = code();\n          }\n          if (codes1.indexOf(codeStr) === -1) {\n            codes1.push(codeStr);\n          }\n        }\n        if (codes1.length === 0) {\n          return undefined;\n        }\n        return codes1.map(code => {\n          return '#include ' + code;\n        }).join('\\n') + '\\n'\n      }\n    }\n  ]\n})",
            "snippets": "",
            "sources": [
                {
                    "name": "src/Lepton-MAX7219/LedControl.h",
                    "url": "src/Lepton-MAX7219/LedControl.h",
                    "fileData": "/*\n *    LedControl.h - A library for controling Leds with a MAX7219/MAX7221\n *    Copyright (c) 2007 Eberhard Fahle\n * \n *    Permission is hereby granted, free of charge, to any person\n *    obtaining a copy of this software and associated documentation\n *    files (the \"Software\"), to deal in the Software without\n *    restriction, including without limitation the rights to use,\n *    copy, modify, merge, publish, distribute, sublicense, and/or sell\n *    copies of the Software, and to permit persons to whom the\n *    Software is furnished to do so, subject to the following\n *    conditions:\n * \n *    This permission notice shall be included in all copies or \n *    substantial portions of the Software.\n * \n *    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n *    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n *    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n *    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n *    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n *    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n *    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n *    OTHER DEALINGS IN THE SOFTWARE.\n */\n\n#ifndef LedControl_h\n#define LedControl_h\n\n#include <avr/pgmspace.h>\n\n#if (ARDUINO >= 100)\n#include <Arduino.h>\n#else\n#include <WProgram.h>\n#endif\n\n/*\n * Segments to be switched on for characters and digits on\n * 7-Segment Displays\n */\nconst static byte charTable [] PROGMEM  = {\n    B01111110,B00110000,B01101101,B01111001,B00110011,B01011011,B01011111,B01110000,\n    B01111111,B01111011,B01110111,B00011111,B00001101,B00111101,B01001111,B01000111,\n    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,\n    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,\n    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,\n    B00000000,B00000000,B00000000,B00000000,B10000000,B00000001,B10000000,B00000000,\n    B01111110,B00110000,B01101101,B01111001,B00110011,B01011011,B01011111,B01110000,\n    B01111111,B01111011,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,\n    B00000000,B01110111,B00011111,B00001101,B00111101,B01001111,B01000111,B00000000,\n    B00110111,B00000000,B00000000,B00000000,B00001110,B00000000,B00000000,B00000000,\n    B01100111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,\n    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001000,\n    B00000000,B01110111,B00011111,B00001101,B00111101,B01001111,B01000111,B00000000,\n    B00110111,B00000000,B00000000,B00000000,B00001110,B00000000,B00010101,B00011101,\n    B01100111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,\n    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000\n};\n\nclass LedControl {\n    private :\n        /* The array for shifting the data to the devices */\n        byte spidata[16];\n        /* Send out a single command to the device */\n        void spiTransfer(int addr, byte opcode, byte data);\n\n        /* We keep track of the led-status for all 8 devices in this array */\n        byte status[64];\n        /* Data is shifted out of this pin*/\n        int SPI_MOSI;\n        /* The clock is signaled on this pin */\n        int SPI_CLK;\n        /* This one is driven LOW for chip selectzion */\n        int SPI_CS;\n        /* The maximum number of devices we use */\n        int maxDevices;\n\n    public:\n        /* \n         * Create a new controler \n         * Params :\n         * dataPin\t\tpin on the Arduino where data gets shifted out\n         * clockPin\t\tpin for the clock\n         * csPin\t\tpin for selecting the device \n         * numDevices\tmaximum number of devices that can be controled\n         */\n        LedControl(int dataPin, int clkPin, int csPin, int numDevices=1);\n\n        /*\n         * Gets the number of devices attached to this LedControl.\n         * Returns :\n         * int\tthe number of devices on this LedControl\n         */\n        int getDeviceCount();\n\n        /* \n         * Set the shutdown (power saving) mode for the device\n         * Params :\n         * addr\tThe address of the display to control\n         * status\tIf true the device goes into power-down mode. Set to false\n         *\t\tfor normal operation.\n         */\n        void shutdown(int addr, bool status);\n\n        /* \n         * Set the number of digits (or rows) to be displayed.\n         * See datasheet for sideeffects of the scanlimit on the brightness\n         * of the display.\n         * Params :\n         * addr\taddress of the display to control\n         * limit\tnumber of digits to be displayed (1..8)\n         */\n        void setScanLimit(int addr, int limit);\n\n        /* \n         * Set the brightness of the display.\n         * Params:\n         * addr\t\tthe address of the display to control\n         * intensity\tthe brightness of the display. (0..15)\n         */\n        void setIntensity(int addr, int intensity);\n\n        /* \n         * Switch all Leds on the display off. \n         * Params:\n         * addr\taddress of the display to control\n         */\n        void clearDisplay(int addr);\n\n        /* \n         * Set the status of a single Led.\n         * Params :\n         * addr\taddress of the display \n         * row\tthe row of the Led (0..7)\n         * col\tthe column of the Led (0..7)\n         * state\tIf true the led is switched on, \n         *\t\tif false it is switched off\n         */\n        void setLed(int addr, int row, int col, boolean state);\n\n        /* \n         * Set all 8 Led's in a row to a new state\n         * Params:\n         * addr\taddress of the display\n         * row\trow which is to be set (0..7)\n         * value\teach bit set to 1 will light up the\n         *\t\tcorresponding Led.\n         */\n        void setRow(int addr, int row, byte value);\n\n        /* \n         * Set all 8 Led's in a column to a new state\n         * Params:\n         * addr\taddress of the display\n         * col\tcolumn which is to be set (0..7)\n         * value\teach bit set to 1 will light up the\n         *\t\tcorresponding Led.\n         */\n        void setColumn(int addr, int col, byte value);\n\n        /* \n         * Display a hexadecimal digit on a 7-Segment Display\n         * Params:\n         * addr\taddress of the display\n         * digit\tthe position of the digit on the display (0..7)\n         * value\tthe value to be displayed. (0x00..0x0F)\n         * dp\tsets the decimal point.\n         */\n        void setDigit(int addr, int digit, byte value, boolean dp);\n\n        /* \n         * Display a character on a 7-Segment display.\n         * There are only a few characters that make sense here :\n         *\t'0','1','2','3','4','5','6','7','8','9','0',\n         *  'A','b','c','d','E','F','H','L','P',\n         *  '.','-','_',' ' \n         * Params:\n         * addr\taddress of the display\n         * digit\tthe position of the character on the display (0..7)\n         * value\tthe character to be displayed. \n         * dp\tsets the decimal point.\n         */\n        void setChar(int addr, int digit, char value, boolean dp);\n};\n\n#endif\t//LedControl.h\n\n\n\n"
                },
                {
                    "name": "src/Lepton-MAX7219/LedControl.cpp",
                    "url": "src/Lepton-MAX7219/LedControl.cpp",
                    "fileData": "/*\n *    LedControl.cpp - A library for controling Leds with a MAX7219/MAX7221\n *    Copyright (c) 2007 Eberhard Fahle\n * \n *    Permission is hereby granted, free of charge, to any person\n *    obtaining a copy of this software and associated documentation\n *    files (the \"Software\"), to deal in the Software without\n *    restriction, including without limitation the rights to use,\n *    copy, modify, merge, publish, distribute, sublicense, and/or sell\n *    copies of the Software, and to permit persons to whom the\n *    Software is furnished to do so, subject to the following\n *    conditions:\n * \n *    This permission notice shall be included in all copies or \n *    substantial portions of the Software.\n * \n *    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n *    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n *    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n *    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n *    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n *    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n *    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n *    OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\n#include \"LedControl.h\"\n\n//the opcodes for the MAX7221 and MAX7219\n#define OP_NOOP   0\n#define OP_DIGIT0 1\n#define OP_DIGIT1 2\n#define OP_DIGIT2 3\n#define OP_DIGIT3 4\n#define OP_DIGIT4 5\n#define OP_DIGIT5 6\n#define OP_DIGIT6 7\n#define OP_DIGIT7 8\n#define OP_DECODEMODE  9\n#define OP_INTENSITY   10\n#define OP_SCANLIMIT   11\n#define OP_SHUTDOWN    12\n#define OP_DISPLAYTEST 15\n\nLedControl::LedControl(int dataPin, int clkPin, int csPin, int numDevices) {\n    SPI_MOSI=dataPin;\n    SPI_CLK=clkPin;\n    SPI_CS=csPin;\n    if(numDevices<=0 || numDevices>8 )\n        numDevices=8;\n    maxDevices=numDevices;\n    pinMode(SPI_MOSI,OUTPUT);\n    pinMode(SPI_CLK,OUTPUT);\n    pinMode(SPI_CS,OUTPUT);\n    digitalWrite(SPI_CS,HIGH);\n    SPI_MOSI=dataPin;\n    for(int i=0;i<64;i++) \n        status[i]=0x00;\n    for(int i=0;i<maxDevices;i++) {\n        spiTransfer(i,OP_DISPLAYTEST,0);\n        //scanlimit is set to max on startup\n        setScanLimit(i,7);\n        //decode is done in source\n        spiTransfer(i,OP_DECODEMODE,0);\n        clearDisplay(i);\n        //we go into shutdown-mode on startup\n        shutdown(i,true);\n    }\n}\n\nint LedControl::getDeviceCount() {\n    return maxDevices;\n}\n\nvoid LedControl::shutdown(int addr, bool b) {\n    if(addr<0 || addr>=maxDevices)\n        return;\n    if(b)\n        spiTransfer(addr, OP_SHUTDOWN,0);\n    else\n        spiTransfer(addr, OP_SHUTDOWN,1);\n}\n\nvoid LedControl::setScanLimit(int addr, int limit) {\n    if(addr<0 || addr>=maxDevices)\n        return;\n    if(limit>=0 && limit<8)\n        spiTransfer(addr, OP_SCANLIMIT,limit);\n}\n\nvoid LedControl::setIntensity(int addr, int intensity) {\n    if(addr<0 || addr>=maxDevices)\n        return;\n    if(intensity>=0 && intensity<16)\t\n        spiTransfer(addr, OP_INTENSITY,intensity);\n}\n\nvoid LedControl::clearDisplay(int addr) {\n    int offset;\n\n    if(addr<0 || addr>=maxDevices)\n        return;\n    offset=addr*8;\n    for(int i=0;i<8;i++) {\n        status[offset+i]=0;\n        spiTransfer(addr, i+1,status[offset+i]);\n    }\n}\n\nvoid LedControl::setLed(int addr, int row, int column, boolean state) {\n    int offset;\n    byte val=0x00;\n\n    if(addr<0 || addr>=maxDevices)\n        return;\n    if(row<0 || row>7 || column<0 || column>7)\n        return;\n    offset=addr*8;\n    val=B10000000 >> column;\n    if(state)\n        status[offset+row]=status[offset+row]|val;\n    else {\n        val=~val;\n        status[offset+row]=status[offset+row]&val;\n    }\n    spiTransfer(addr, row+1,status[offset+row]);\n}\n\nvoid LedControl::setRow(int addr, int row, byte value) {\n    int offset;\n    if(addr<0 || addr>=maxDevices)\n        return;\n    if(row<0 || row>7)\n        return;\n    offset=addr*8;\n    status[offset+row]=value;\n    spiTransfer(addr, row+1,status[offset+row]);\n}\n\nvoid LedControl::setColumn(int addr, int col, byte value) {\n    byte val;\n\n    if(addr<0 || addr>=maxDevices)\n        return;\n    if(col<0 || col>7) \n        return;\n    for(int row=0;row<8;row++) {\n        val=value >> (7-row);\n        val=val & 0x01;\n        setLed(addr,row,col,val);\n    }\n}\n\nvoid LedControl::setDigit(int addr, int digit, byte value, boolean dp) {\n    int offset;\n    byte v;\n\n    if(addr<0 || addr>=maxDevices)\n        return;\n    if(digit<0 || digit>7 || value>15)\n        return;\n    offset=addr*8;\n    v=pgm_read_byte_near(charTable + value); \n    if(dp)\n        v|=B10000000;\n    status[offset+digit]=v;\n    spiTransfer(addr, digit+1,v);\n}\n\nvoid LedControl::setChar(int addr, int digit, char value, boolean dp) {\n    int offset;\n    byte index,v;\n\n    if(addr<0 || addr>=maxDevices)\n        return;\n    if(digit<0 || digit>7)\n        return;\n    offset=addr*8;\n    index=(byte)value;\n    if(index >127) {\n        //no defined beyond index 127, so we use the space char\n        index=32;\n    }\n    v=pgm_read_byte_near(charTable + index); \n    if(dp)\n        v|=B10000000;\n    status[offset+digit]=v;\n    spiTransfer(addr, digit+1,v);\n}\n\nvoid LedControl::spiTransfer(int addr, volatile byte opcode, volatile byte data) {\n    //Create an array with the data to shift out\n    int offset=addr*2;\n    int maxbytes=maxDevices*2;\n\n    for(int i=0;i<maxbytes;i++)\n        spidata[i]=(byte)0;\n    //put our device data into the array\n    spidata[offset+1]=opcode;\n    spidata[offset]=data;\n    //enable the line \n    digitalWrite(SPI_CS,LOW);\n    //Now shift out the data \n    for(int i=maxbytes;i>0;i--)\n        shiftOut(SPI_MOSI,SPI_CLK,MSBFIRST,spidata[i-1]);\n    //latch the data onto the display\n    digitalWrite(SPI_CS,HIGH);\n}    \n\n\n"
                }
            ]
        }
    },
    "main": "https://storage-eu.mblock.cc/ext-eu/extlist/prod/previewJs/lepton_max7219__413_2276715.js",
    "originVersion": "0.0.3",
    "id": "32357"
}